/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenPresaleVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRICE_DECIMALS"
      | "TOKEN_PRICE_USDT"
      | "VESTING_PERIODS"
      | "allocations"
      | "buyTokens"
      | "claimTokens"
      | "endPresale"
      | "getRemainingTokens"
      | "getSaleTokenPrice"
      | "getUserAllocation"
      | "isPresaleEnded"
      | "maxPurchase"
      | "minPurchase"
      | "owner"
      | "presaleEndTime"
      | "presaleEnded"
      | "saleToken"
      | "setMinMax"
      | "updateOwner"
      | "usdt"
      | "vestingInterval"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PresaleEnded"
      | "TokensClaimed"
      | "TokensPurchased"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_PRICE_USDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_PERIODS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endPresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAllocation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPresaleEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleEnded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMinMax",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_PRICE_USDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_PERIODS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endPresale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPresaleEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace PresaleEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [buyer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [buyer: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    usdtAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    usdtAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    buyer: string;
    usdtAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    to: AddressLike,
    usdtAmount: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    usdtAmount: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    to: string;
    usdtAmount: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenPresaleVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenPresaleVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenPresaleVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRICE_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  TOKEN_PRICE_USDT: TypedContractMethod<[], [bigint], "view">;

  VESTING_PERIODS: TypedContractMethod<[], [bigint], "view">;

  allocations: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { total: bigint; claimed: bigint }],
    "view"
  >;

  buyTokens: TypedContractMethod<
    [usdtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimTokens: TypedContractMethod<[], [void], "nonpayable">;

  endPresale: TypedContractMethod<[], [void], "nonpayable">;

  getRemainingTokens: TypedContractMethod<[], [bigint], "view">;

  getSaleTokenPrice: TypedContractMethod<
    [],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;

  getUserAllocation: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        total: bigint;
        claimed: bigint;
        claimable: bigint;
      }
    ],
    "view"
  >;

  isPresaleEnded: TypedContractMethod<[], [boolean], "view">;

  maxPurchase: TypedContractMethod<[], [bigint], "view">;

  minPurchase: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  presaleEndTime: TypedContractMethod<[], [bigint], "view">;

  presaleEnded: TypedContractMethod<[], [boolean], "view">;

  saleToken: TypedContractMethod<[], [string], "view">;

  setMinMax: TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOwner: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdt: TypedContractMethod<[], [string], "view">;

  vestingInterval: TypedContractMethod<[], [bigint], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRICE_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_PRICE_USDT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VESTING_PERIODS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { total: bigint; claimed: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<[usdtAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endPresale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRemainingTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSaleTokenPrice"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { price: bigint; decimals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAllocation"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        total: bigint;
        claimed: bigint;
        claimable: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPresaleEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxPurchase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPurchase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "presaleEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "presaleEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "saleToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMinMax"
  ): TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vestingInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PresaleEnded"
  ): TypedContractEvent<
    PresaleEndedEvent.InputTuple,
    PresaleEndedEvent.OutputTuple,
    PresaleEndedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "PresaleEnded()": TypedContractEvent<
      PresaleEndedEvent.InputTuple,
      PresaleEndedEvent.OutputTuple,
      PresaleEndedEvent.OutputObject
    >;
    PresaleEnded: TypedContractEvent<
      PresaleEndedEvent.InputTuple,
      PresaleEndedEvent.OutputTuple,
      PresaleEndedEvent.OutputObject
    >;

    "TokensClaimed(address,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensPurchased(address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
